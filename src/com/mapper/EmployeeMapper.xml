<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.EmployeeMapper">

        <select id="getEmpById" resultType="emp">
            select * from  tbl_employee where id = #{id}
        </select>

    <!--动态sql
        • if:判断
        • choose (when, otherwise):分支选择；带了break的swtich-case
	        如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个
        • trim 字符串截取(where(封装查询条件), set(封装修改条件))
        • foreach 遍历集合
    -->

    <!--查询 员工  携带了哪个字段 查询就带上这个字段的值-->
    <select id="getEmpByConditionIf" resultType="emp">

        select * from  tbl_employee
        <where>
            <if test = "id != null and id != '' ">id = #{id}</if>
            <if test = "lastName != null and lastName != '' ">and last_name = #{lastName}</if>
            <if test="gender == 1 or gender == 0 ">and  gender = #{gender}</if>
            <if test="email != null and email != '' ">and  email = #{email}</if>
        </where>
    </select>

    <!-- 后面多出的and或者or where标签不能解决
	 	prefix="":前缀：trim标签体中是整个字符串拼串 后的结果。
	 			prefix给拼串后的整个字符串加一个前缀
	 	prefixOverrides="":
	 			前缀覆盖： 去掉整个字符串前面多余的字符
	 	suffix="":后缀
	 			suffix给拼串后的整个字符串加一个后缀
	 	suffixOverrides=""
	 			后缀覆盖：去掉整个字符串后面多余的字符

	 	-->
    <select id="getEmpByConditionTrim" resultType="emp">
        select * from tbl_employee
        <trim prefix="where" suffixOverrides="and">
            <if test="id!=null">
                id=#{id} and
            </if>
            <if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
                last_name like #{lastName} and
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                email=#{email} and
            </if>
            <!-- ognl会进行字符串与数字的转换判断  "0"==0 -->
            <if test="gender==0 or gender==1">
                gender=#{gender}
            </if>
        </trim>
    </select>

    <!--
        <set>
        会去掉后面多余的 ,
    -->

    <update id="updateEmp">
        update tab_employee
        <set>
            <if test="lastName!=null">
                last_name=#{lastName},
            </if>
            <if test="email!=null">
                email=#{email},
            </if>
            <if test="gender!=null">
                gender=#{gender}
            </if>
        </set>
        where id=#{id}
    </update>
    <!--
	 		collection：指定要遍历的集合：
	 			list类型的参数会特殊处理封装在map中，map的key就叫list
	 		item：将当前遍历出的元素赋值给指定的变量
	 		separator:每个元素之间的分隔符
	 		open：遍历出所有结果拼接一个开始的字符
	 		close:遍历出所有结果拼接一个结束的字符
	 		index:索引。遍历list的时候是index就是索引，item就是当前值
	 				      遍历map的时候index表示的就是map的key，item就是map的值

	 		#{变量名}就能取出变量的值也就是当前遍历出的元素
	 	  -->
    <select id="getEmpByConditionForeach" resultType="emp">
        select * from tbl_employee
        where  id in

        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>

    <!--批量插入-->
    <insert id="addEmps">
        insert into tbl_employee(last_name,email,gender) values
        <foreach collection="emps" item="emp" separator=",">
            (#{emp.lastName},#{emp.email},#{emp.gender})
        </foreach>
    </insert>

    <!--sql片段-->
    <sql id="insertColumn">
        last_name,email,gender,d_id
    </sql>

</mapper>